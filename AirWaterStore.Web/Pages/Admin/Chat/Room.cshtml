@page "{id:int}"
@using AirWaterStore.Web.Helper
@model AirWaterStore.Web.Pages.Admin.Chat.RoomModel
@{
    ViewData["Title"] = $"Chat with {Model.CustomerName}";
}

<h1>Chat with @Model.CustomerName</h1>

<div class="row">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <h5>Chat Room #@Model.ChatRoom.ChatRoomId</h5>
            </div>
            <div class="card-body" style="height: 400px; overflow-y: auto;" id="chatMessages">
                @foreach (var message in Model.Messages)
                {
                    <div class="message-item @(message.UserId == Model.GetCurrentUserId() ? "message-outgoing" : "message-incoming")" data-message-id="@message.MessageId">
                        <div class="message-bubble">
                            <div class="message-header">
                                <span class="message-username">@Model.GetUsername(message.UserId)</span>
                                <span class="message-time">@message.SentAt?.ToString("HH:mm")</span>
                            </div>
                            <div class="message-content">
                                @message.Content
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="card-footer">
                <div id="typingIndicator" class="text-muted small mb-2" style="display: none;">
                    <span id="typingText"></span> is typing...
                </div>
                <div class="input-group">
                    <input type="text" id="messageInput" class="form-control" placeholder="Type your response..." />
                    <div class="input-group-append">
                        <button type="button" id="sendButton" class="btn btn-primary">Send</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h5>Chat Information</h5>
            </div>
            <div class="card-body">
                <dl class="row">
                    <dt class="col-sm-5">Customer:</dt>
                    <dd class="col-sm-7">@Model.CustomerName</dd>

                    <dt class="col-sm-5">Assigned Staff:</dt>
                    <dd class="col-sm-7">
                        @* @if (Model.ChatRoom.StaffId.HasValue)
                        {
                            <span class="text-success">Staff Assigned</span>
                        }
                        else
                        {
                            <span class="text-warning">Unassigned</span>
                        } *@
                        <span id="staffStatus" class="@(Model.ChatRoom.StaffId.HasValue ? "text-success" : "text-warning")">
                            @(Model.ChatRoom.StaffId.HasValue ? "Staff Assigned" : "Unassigned")
                        </span>
                    </dd>

                    @* <dt class="col-sm-5">Messages:</dt>
                    <dd class="col-sm-7">@Model.Messages.Count</dd> *@

                    <dt class="col-sm-5">Connection:</dt>
                    <dd class="col-sm-7">
                        <span id="connectionStatus" class="text-warning">Connecting...</span>
                    </dd>
                </dl>

                <a asp-page="/Admin/Chat/Index" class="btn btn-secondary btn-block">Back to Dashboard</a>
            </div>
        </div>
    </div>
</div>

<input type="hidden" id="chatRoomId" value="@Model.ChatRoom.ChatRoomId" />
<input type="hidden" id="currentUserId" value="@Model.GetCurrentUserId()" />
<input type="hidden" id="currentUsername" value="@Model.GetUsername(Model.GetCurrentUserId())" />

@section Scripts {
    <script src="~/lib/microsoft-signalr/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chathub")
            .build();

        const chatRoomId = parseInt(document.getElementById('chatRoomId').value);
        const currentUserId = parseInt(document.getElementById('currentUserId').value);
        const currentUsername = document.getElementById('currentUsername').value;
        const messageInput = document.getElementById('messageInput');
        const sendButton = document.getElementById('sendButton');
        const chatMessages = document.getElementById('chatMessages');
        const typingIndicator = document.getElementById('typingIndicator');
        const typingText = document.getElementById('typingText');
        const connectionStatus = document.getElementById('connectionStatus');

        let typingTimer;

        // Receive message
        connection.on("ReceiveMessage", function (message) {
            const messageDiv = document.createElement('div');
            const isCurrentUser = message.userId === currentUserId;

            messageDiv.className = `message-item mb-3 ${isCurrentUser ? 'text-right' : 'text-left'}`;
            messageDiv.setAttribute('data-message-id', message.messageId);

            messageDiv.innerHTML = `
                        <div class="d-inline-block p-2 rounded ${isCurrentUser ? 'bg-primary text-white' : 'bg-light'}">
                            <small class="d-block ${isCurrentUser ? 'text-white-50' : 'text-muted'}">
                                ${message.username} - ${message.sentAt}
                            </small>
                            ${message.content}
                        </div>
                    `;

            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        });

        // Handle typing indicator
        connection.on("UserTyping", function (data) {
            if (data.userId !== currentUserId) {
                if (data.isTyping) {
                    typingText.textContent = data.username;
                    typingIndicator.style.display = 'block';
                } else {
                    typingIndicator.style.display = 'none';
                }
            }
        });

        // Send message
        function sendMessage() {
            const message = messageInput.value.trim();
            if (message) {
                connection.invoke("SendMessage", chatRoomId, message).catch(function (err) {
                    console.error(err);
                });
                messageInput.value = '';
                connection.invoke("NotifyTyping", chatRoomId, false);
                const staffStatus = document.querySelector("#staffStatus");
                if (staffStatus) {
                    staffStatus.className = "text-success";
                    staffStatus.textContent = "Staff Assigned";
                }
            }
        }

        sendButton.addEventListener('click', sendMessage);

        messageInput.addEventListener('keypress', function (e) {
            if (e.key === 'Enter') {
                sendMessage();
            } else {
                clearTimeout(typingTimer);
                connection.invoke("NotifyTyping", chatRoomId, true);

                typingTimer = setTimeout(function () {
                    connection.invoke("NotifyTyping", chatRoomId, false);
                }, 1000);
            }
        });

        // Start connection
        connection.start().then(function () {
            connectionStatus.textContent = 'Connected';
            connectionStatus.className = 'text-success';

            // Join chat room
            connection.invoke("JoinChatRoom", chatRoomId).catch(function (err) {
                console.error(err);
            });
        }).catch(function (err) {
            console.error(err);
            connectionStatus.textContent = 'Connection failed';
            connectionStatus.className = 'text-danger';
        });

        // Auto-scroll to bottom on load
        chatMessages.scrollTop = chatMessages.scrollHeight;
    </script>
}