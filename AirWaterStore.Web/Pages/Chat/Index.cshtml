@page
@using AirWaterStore.Web.Helper
@model AirWaterStore.Web.Pages.Chat.IndexModel
@{
    ViewData["Title"] = "Support Chat";
}

<div class="chat-container">
    <!-- Header Section -->
    <div class="chat-header">
        <div class="header-content">
            <div class="header-left">
                <div class="chat-icon">
                    <i class="fas fa-headset"></i>
                </div>
                <div class="header-text">
                    <h1 class="chat-title">Support Chat</h1>
                    <p class="chat-subtitle">We're here to help you 24/7</p>
                </div>
            </div>
            <div class="header-right">
                <div class="connection-status">
                    <div class="status-indicator" id="statusIndicator"></div>
                    <span id="connectionStatus" class="status-text">Connecting...</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Chat Section -->
    <div class="chat-main">
        <div class="chat-content">
            <!-- Chat Messages Area -->
            <div class="chat-messages" id="chatMessages">
                @if (Model.Messages.Any())
                {
                    @foreach (var message in Model.Messages)
                    {
                        <div class="message-item @(message.UserId == Model.GetCurrentUserId() ? "message-outgoing" : "message-incoming")" data-message-id="@message.MessageId">
                            <div class="message-bubble">
                                <div class="message-header">
                                    <span class="message-username">@Model.GetUsername(message.UserId)</span>
                                    <span class="message-time">@message.SentAt?.ToString("HH:mm")</span>
                                </div>
                                <div class="message-content">
                                    @message.Content
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="welcome-message" id="noMessagesText">
                        <div class="welcome-icon">
                            <i class="fas fa-comments"></i>
                        </div>
                        <h3>Welcome to Support Chat!</h3>
                        <p>Start a conversation with our support team. We're here to help you with any questions or concerns.</p>
                        <div class="welcome-features">
                            <div class="feature-item">
                                <i class="fas fa-clock"></i>
                                <span>24/7 Support</span>
                            </div>
                            <div class="feature-item">
                                <i class="fas fa-user-tie"></i>
                                <span>Expert Staff</span>
                            </div>
                            <div class="feature-item">
                                <i class="fas fa-shield-alt"></i>
                                <span>Secure Chat</span>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Typing Indicator -->
            <div id="typingIndicator" class="typing-indicator" style="display: none;">
                <div class="typing-dots">
                    <span id="typingText"></span> is typing
                    <div class="dots">
                        <span></span>
                        <span></span>
                        <span></span>
                    </div>
                </div>
            </div>

            <!-- Message Input Area -->
            @* <div class="chat-input-area">
                <div class="input-container">
                    <div class="input-wrapper">
                        <input type="text" id="messageInput" class="message-input" placeholder="Type your message here..." />
                        <button type="button" id="sendButton" class="send-button">
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </div>
                </div>
            </div> *@
            <div class="card-footer">
                <div id="typingIndicator" class="text-muted small mb-2" style="display: none;">
                    <span id="typingText"></span> is typing...
                </div>
                <div class="input-group">
                    <input type="text" id="messageInput" class="form-control" placeholder="Type your response..." />
                    <div class="input-group-append">
                        <button type="button" id="sendButton" class="btn btn-primary">Send</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Sidebar Information -->
        <div class="chat-sidebar d-none d-lg-block">
            <div class="sidebar-card">
                <div class="card-header">
                    <h5><i class="fas fa-info-circle"></i> Chat Information</h5>
                </div>
                <div class="card-body">
                    <div class="info-section">
                        <h6>Chat Status</h6>
                        @if (Model.ChatRoom.StaffId.HasValue)
                        {
                            <div class="status-badge status-connected">
                                <i class="fas fa-check-circle"></i>
                                <span>Connected with Support</span>
                            </div>
                        }
                        else
                        {
                            <div class="status-badge status-waiting">
                                <i class="fas fa-clock"></i>
                                <span>Waiting for Staff</span>
                            </div>
                        }
                    </div>

                    <div class="info-section">
                        <h6>Response Time</h6>
                        <p class="response-time">Usually within 2-5 minutes</p>
                    </div>

                    <div class="info-section">
                        <h6>Available Support</h6>
                        <div class="support-options">
                            <div class="support-option">
                                <i class="fas fa-shopping-cart"></i>
                                <span>Order Issues</span>
                            </div>
                            <div class="support-option">
                                <i class="fas fa-gamepad"></i>
                                <span>Product Support</span>
                            </div>
                            <div class="support-option">
                                <i class="fas fa-credit-card"></i>
                                <span>Payment Help</span>
                            </div>
                            <div class="support-option">
                                <i class="fas fa-question-circle"></i>
                                <span>General Questions</span>
                            </div>
                        </div>
                    </div>

                    <div class="info-section">
                        <h6>Quick Actions</h6>
                        <div class="quick-actions">
                            <button class="quick-btn" onclick="sendQuickMessage('Hello! I need help with my order.')">
                                <i class="fas fa-shopping-bag"></i>
                                Order Help
                            </button>
                            <button class="quick-btn" onclick="sendQuickMessage('I have a question about a product.')">
                                <i class="fas fa-info"></i>
                                Product Info
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    
    </div>
</div>

<input type="hidden" id="chatRoomId" value="@Model.ChatRoom.ChatRoomId" />
<input type="hidden" id="currentUserId" value="@Model.GetCurrentUserId()" />
<input type="hidden" id="currentUsername" value="@Model.GetUsername(Model.GetCurrentUserId())" />

<!-- Add Font Awesome for icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />

@section Scripts {
    <script src="~/lib/microsoft-signalr/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chathub")
            .build();

        const chatRoomId = parseInt(document.getElementById('chatRoomId').value);
        const currentUserId = parseInt(document.getElementById('currentUserId').value);
        const currentUsername = document.getElementById('currentUsername').value;
        const messageInput = document.getElementById('messageInput');
        const sendButton = document.getElementById('sendButton');
        const chatMessages = document.getElementById('chatMessages');
        const typingIndicator = document.getElementById('typingIndicator');
        const typingText = document.getElementById('typingText');
        const connectionStatus = document.getElementById('connectionStatus');
        const statusIndicator = document.getElementById('statusIndicator');
        const noMessagesText = document.getElementById('noMessagesText');

        let typingTimer;

        // Quick message function
        function sendQuickMessage(message) {
            messageInput.value = message;
            sendMessage();
        }

        // Receive message with animation
        connection.on("ReceiveMessage", function (message) {
            if (noMessagesText) {
                noMessagesText.style.display = 'none';
            }

            const messageDiv = document.createElement('div');
            const isCurrentUser = message.userId === currentUserId;

            messageDiv.className = `message-item ${isCurrentUser ? 'message-outgoing' : 'message-incoming'}`;
            messageDiv.setAttribute('data-message-id', message.messageId);

            messageDiv.innerHTML = `
                <div class="message-bubble">
                    <div class="message-header">
                        <span class="message-username">${message.username}</span>
                        <span class="message-time">${message.sentAt}</span>
                    </div>
                    <div class="message-content">
                        ${message.content}
                    </div>
                </div>
            `;

            // Add animation class
            messageDiv.classList.add('message-enter');
            
            chatMessages.appendChild(messageDiv);
            
            // Trigger animation
            setTimeout(() => {
                messageDiv.classList.remove('message-enter');
            }, 100);

            chatMessages.scrollTop = chatMessages.scrollHeight;
        });

        // Handle typing indicator
        connection.on("UserTyping", function (data) {
            if (data.userId !== currentUserId) {
                if (data.isTyping) {
                    typingText.textContent = 'Staff';
                    typingIndicator.style.display = 'block';
                } else {
                    typingIndicator.style.display = 'none';
                }
            }
        });

        // Send message
        function sendMessage() {
            const message = messageInput.value.trim();
            if (message) {
                connection.invoke("SendMessage", chatRoomId, message).catch(function (err) {
                    console.error(err);
                });
                messageInput.value = '';
                connection.invoke("NotifyTyping", chatRoomId, false);
                
                // Add loading state to send button
                sendButton.classList.add('sending');
                setTimeout(() => {
                    sendButton.classList.remove('sending');
                }, 1000);
            }
        }

        sendButton.addEventListener('click', sendMessage);

        messageInput.addEventListener('keypress', function (e) {
            if (e.key === 'Enter') {
                sendMessage();
            } else {
                clearTimeout(typingTimer);
                connection.invoke("NotifyTyping", chatRoomId, true);

                typingTimer = setTimeout(function () {
                    connection.invoke("NotifyTyping", chatRoomId, false);
                }, 1000);
            }
        });

        // Start connection
        connection.start().then(function () {
            connectionStatus.textContent = 'Connected';
            connectionStatus.className = 'status-text status-connected';
            statusIndicator.className = 'status-indicator status-connected';

            // Join chat room
            connection.invoke("JoinChatRoom", chatRoomId).catch(function (err) {
                console.error(err);
            });
        }).catch(function (err) {
            console.error(err);
            connectionStatus.textContent = 'Connection failed';
            connectionStatus.className = 'status-text status-failed';
            statusIndicator.className = 'status-indicator status-failed';
        });

        // Auto-scroll to bottom on load
        chatMessages.scrollTop = chatMessages.scrollHeight;

        // Focus on input when page loads
        messageInput.focus();
    </script>
}